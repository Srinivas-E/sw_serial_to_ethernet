#undef process_loop	
#undef idle_process
#undef data_process
#undef invalid_start
#undef immediate_start_bit
#undef dp_calc_tick
#undef next_channel
#undef channel_num
#define channel_num `chan_id`
#define process_loop process_loop_`chan_id`
#define idle_process idle_process_`chan_id`
#define data_process data_process_`chan_id`
#define immediate_start_bit immediate_start_bit_`chan_id`
#define invalid_start invalid_start_`chan_id`
#define dp_calc_tick dp_calc_tick_`chan_id`
#if CHAN_COUNT == `chan_count`
#define next_channel rx_bit_ep
#else
#define next_channel `next_chan`
#endif

process_loop:                                   
    /* initialise channel count */              
	ldc r5, channel_num
	
	/* get fourBits */                          
	and r8, r6, r7 // mask off bits             
    mkmsk r11, 4                                
    crc32 r8, r11, r11 // compress bits         

    ldaw r11, dp[fourBitConfig] // do lookup    
    ldw r11, r11[r5]
    ldw r8, r11[r8] // get fourBits             

	/* check if state is idle (0x0) */
	ldw r11, r1[r5]
	bf r11, idle_process
    
    /* check if tickcount is  =< 4 (same as < 5) */
	ldc r11, 5
	ldw r10, r2[r5]
	lss r11, r10, r11
	bt r11, data_process // WARN - we assume here that we only have two states, adding more states is costly

	/* decerement tick_count */
	sub r10, r10, 4 
	stw r10, r2[r5]
	
	/* shift port_val, and advance to next channel */
    shr r6, r6, 1
    bu next_channel
	
idle_process:
    /* This state detects the start of a start bit by looking for a change in state in the line
     * sampling points are then calculated from this point
     */
    
    /* initial tc */
    ldaw r11, dp[uart_rx_channel]
    ldc r9, CHAN_STRUCT_SIZE
    mul r10, r5, r9 // get struct pointer for channel
    add r11, r11, r10
    
    /* initialise bit count */
    ldw r9, r11[1] // word_len
    stw r9, r3[r5]
    
    /* clocks_per_bit */
    ldw r10, r11[2]
    
    /* use_sample */
    ldw r9, r11[4]
    
    /* calculate tick_count */
    add r9, r9, r10
    
    /* lookup TC value and check for valid start */
    ldaw r10, dp[startBitConfig] 
    ldw r10, r10[r5] // get address for the startBitLookup we will use
    
    ldc r11, 0xf
    and r8, r8, r11
    ldw r10, r10[r8]
    /* check if we have invalid SB */
    mkmsk r8, 32
    eq r8, r8, r10
    bt r8, invalid_start
    
    /* store new state - at this point r8 == 1*/
    ldc r8, 1
    stw r8, r1[r5] 
    
    /* sub TC value for swallowed bits */
    sub r9, r9, r10
    
    /* zero uart_word entry */
    ldc r10, 0
    stw r10, r4[r5]
    
    /* store tick_count */
    stw r9, r2[r5]
    
    /* shift port_val, check loop and increment or quit loop */
    shr r6, r6, 1
    bu next_channel
    
invalid_start:    
    /* shift port_val, and advance to next channel */
    shr r6, r6, 1
    bu next_channel
    
data_process:
    /* get potential start bit indicator */
    shr r9, r8, 4
    stw r9, sp[11]
    
    /* get bit from fourBits - tick_count still in r10 */
    sub r10, r10, 1
    shr r8, r8, r10
    ldc r9, 1
    and r8, r8, r9 // now got the bit
    
    /* store the bit in uart_word */
    ldw r11, r4[r5]
    shl r11, r11, r9
    or r11, r11, r8
    stw r11, r4[r5]
    
    /* decrement bit_count */
    ldw r10, r3[r5]
    sub r10, r10, r9
    stw r10, r3[r5]
    
    /* if bit_count == 0 then change state and get new tick count else calculate new tick count */
    bt r10, dp_calc_tick
    
    /* store rx'd data in memory - means we don't block */
    ldw r9, sp[STACK_SIZE+3]
    stw r11, r9[r5] // write data into array
    
    /* send data word out */
    ldw r9, sp[STACK_SIZE+2]
    outt res[r9], r5 // using outt means we won't block for up to 8 tokens
    
    /* check flag for a start bit in this set of samples */
    ldw r10, sp[11]    
    bt r10, immediate_start_bit
    
    // set state to idle - r10 is 0
    stw r10, r1[r5] 
    
    /* shift port_val and advance to next channel */
    shr r6, r6, 1
    bu next_channel

immediate_start_bit:
    /* this handles a start bit transition detected in the stop bit sample */
    
    /* initial tc */
    ldaw r11, dp[uart_rx_channel]
    ldc r9, CHAN_STRUCT_SIZE
    mul r10, r5, r9 // get struct pointer for channel
    add r11, r11, r10
    
    /* initialise bit count */
    ldw r9, r11[1] // word_len
    stw r9, r3[r5]
    
    /* clocks_per_bit */
    ldw r10, r11[2]
    
    /* use_sample */
    ldw r9, r11[4]
    
    /* calculate tick_count */
    add r9, r9, r10
    
    /* get number of bits swallowed */
    ldw r10, sp[11]
    
    /* store new state*/
    // state doesn't change ?!
//    ldc r8, 1
//    stw r8, r1[r5] 
    
    /* sub TC value for swallowed bits */
    sub r9, r9, r10
    
    /* zero uart_word entry */
    ldc r10, 0
    stw r10, r4[r5]
    
    /* store tick_count */
    stw r9, r2[r5]
    
    /* shift port_val, check loop and increment or quit loop */
    shr r6, r6, 1
    bu next_channel
    
dp_calc_tick:
    
    // get struct pointer for UART channel
    ldaw r11, dp[uart_rx_channel]
    ldc r9, CHAN_STRUCT_SIZE
    mul r9, r5, r9
    add r11, r11, r9
    
    /* load tick_count[i] */
    ldw r10, r2[r5]
    
    /* get clocks_per_bit, and correct for bits we already swallowed */
    ldw r11, r11[2]
    // new tick_count = cpb - (4-tc) = cpb - 4 + tc
    sub r11, r11, 4
    add r11, r11, r10
    stw r11, r2[r5]
    
    /* shift port_val, and advance to next channel */
    shr r6, r6, 1
    
    #if CHAN_COUNT == `chan_count`
    bu rx_bit_ep
    #endif
