/* 
 * This function handles UART port RX (Autogenerated for unrolling)
 */

#ifdef __multi_uart_rx_conf_h_exists__
#include "multi_uart_rx_conf.h"
#else
#define UART_RX_CHAN_COUNT  8
#endif

#define STACK_SIZE  12
#define CHAN_STRUCT_SIZE 0x20
// TODO this needs to come from the configuration header
#define CHAN_COUNT UART_RX_CHAN_COUNT

/* function prototype:
 * void uart_rx_loop( in buffered port:32 pUart, e_uart_rx_chan_state state[], int tick_count[], int bit_count[], int uart_word[], streaming chanend cUART, unsigned rx_char_slots[]  )
 */
 
.globl uart_rx_loop_8.nstackwords
.globl uart_rx_loop_8.maxthreads
.globl uart_rx_loop_8.maxtimers
.globl uart_rx_loop_8.maxchanends

.linkset uart_rx_loop_8.nstackwords, STACK_SIZE
.linkset uart_rx_loop_8.maxchanends, 0
.linkset uart_rx_loop_8.maxtimers, 0
.linkset uart_rx_loop_8.maxthreads, 0

.globl uart_rx_loop_8

.text
.cc_top uart_rx_loop_8.func, uart_rx_loop_8

uart_rx_loop_8:
    entsp STACK_SIZE

    /* stack usage:
     * sp[1]  => callee save r4
     * sp[2]  => callee save r5
     * sp[3]  => callee save r6
     * sp[4]  => callee save r7
     * sp[5]  => callee save r8
     * sp[6]  => callee save r9
     * sp[7]  => callee save r10
     * sp[8]  => state pointer
     * sp[9]  => tick_count pointer
     * sp[10] => bit_count pointer
     * sp[11] => potential start indicator
     * sp[STACK_SIZE+1] => uart_word pointer
     * sp[STACK_SIZE+2] => cUART channel
     * sp[STACK_SIZE+3] => rx_char buffer pointer
     */

    /* callee save */
	stw r4, sp[1]	
	stw r5, sp[2]
	stw r6, sp[3]
	stw r7, sp[4]
	stw r8, sp[5]
	stw r9, sp[6]
	stw r10, sp[7]
	
	/* register usage 
	 * r0  => port
	 * r1  => state pointer
	 * r2  => tick_count pointer
	 * r3  => bit_count pointer
	 * r4  => uart_word pointer
	 * r5  => channel id
	 * r6  => port_val
	 * r7  => mask
	 * r8  => fourBit / bit
	 * r9  => scratch
	 * r10 => scratch
	 * r11 => scratch / uart_tx_channel access
	 */
	
	/* clear any events */
	clre
	
	/* set mask */
	ldc r11, 0x0101
	shl r7, r11, 16
	or r7, r7, r11
	
	/* load uart_word pointer */
	ldw r4, sp[STACK_SIZE+1]
	
	/* store root pointers */
	stw r1, sp[8]
	stw r2, sp[9]
	stw r3, sp[10]
	
	/* setup pause target */
	ldap r11, finish_uart_rx
	ldw r10, sp[STACK_SIZE+2]
	setv res[r10], r11
	eeu res[r10]
	
rx_bit_ep:
    /* check for pause command on the channel */
    setsr 0x1
    clrsr 0x1
    
    /* get data */
	in r6,res[r0]
	
	
